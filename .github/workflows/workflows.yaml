name: Axolotl pipeline

on:
  push:
    branches:
      - main
    tags:
      - v
  pull_request:
env:
  GO_VERSION: 1.16
  NODE_VERSION: "16.x"

jobs:
  build-axolotl:
    name: Build axolotl
    runs-on: ubuntu-latest

    steps:
      - name: Setup Go 1.16
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Check out code
        uses: actions/checkout@v2

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -race ./...

      - name: Build
        run: go build -v

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: axolotl
          path: axolotl
          retention-days: 1

  build-axolotl-web:
    name: Build axolotl-web
    runs-on: ubuntu-latest

    steps:
      - name: Setup Node 16
        uses: actions/setup-node@v2.5.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check out code
        uses: actions/checkout@v2

      - name: Download dependencies
        run: npm --prefix ./axolotl-web ci --loglevel verbose

      - name: Run tests
        run: npm --prefix ./axolotl-web test

      - name: Lint application
        run: npm --prefix ./axolotl-web run lint

      - name: Analyze npm dependencies
        run: npm --prefix ./axolotl-web run depcheck

      - name: Build
        run: npm --prefix ./axolotl-web run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: axolotl-web
          path: axolotl-web/dist/
          retention-days: 1

  build-crayfish:
    name: Build crayfish
    runs-on: ubuntu-latest

    steps:
      - name: Setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path crayfish/Cargo.toml --release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: crayfish
          path: crayfish/target/release/crayfish
          retention-days: 1

  package-appimage:
    name: Package as AppImage
    # This ensures that this job only runs on git tags
    #if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-axolotl, build-axolotl-web, build-crayfish]
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Download axolotl and axolotl-web build artifacts
        uses: actions/download-artifact@v2
        with:
          path: build-artifacts

      - name: Setup appimagetool
        run: |
          curl -sLO https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage

      - name: Build AppImage (x86_64)
        env:
          ARCH: x86_64
        run: |
          mkdir -p build/AppDir/usr/bin
          cp -f build-artifacts/axolotl/axolotl build/AppDir/usr/bin/axolotl
          chmod +x build/AppDir/usr/bin/axolotl

          mkdir -p build/AppDir/usr/bin/axolotl-web/dist
          cp -rf build-artifacts/axolotl-web/* build/AppDir/usr/bin/axolotl-web/dist

          cp -f appimage/AppDir/AppRun build/AppDir/AppRun
          chmod +x build/AppDir/AppRun

          cp -f appimage/AppDir/axolotl.desktop build/AppDir/axolotl.desktop
          cp -f appimage/AppDir/axolotl.png build/AppDir/axolotl.png

          mkdir -p build/AppDir/usr/share/metainfo
          cp -f appimage/AppDir/axolotl.appdata.xml build/AppDir/usr/share/metainfo/axolotl.appdata.xml

          ./appimagetool-x86_64.AppImage build/AppDir

      - name: Upload the built AppImage artifact
        uses: actions/upload-artifact@v2
        with:
          name: Axolotl-AppImage
          path: Axolotl-x86_64.AppImage
          retention-days: 5

  package-click-armhf:
    name: Package as click armhf
    runs-on: ubuntu-latest
    needs: [build-axolotl-web]

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Download axolotl and axolotl-web build artifacts
        uses: actions/download-artifact@v2
        with:
          path: build-artifacts

      - name: Put axolotl web in place
        run: |
          mkdir $GITHUB_WORKSPACE/axolotl-web/dist
          cp -rf build-artifacts/axolotl-web/* $GITHUB_WORKSPACE/axolotl-web/dist

      - name: Download built zkgroup library (armhf)
        run: |
          wget --quiet https://github.com/nanu-c/zkgroup/releases/download/v0.8.8/libzkgroup_linux_armv7_v0.8.8.so
          mkdir $GITHUB_WORKSPACE/lib/
          mv libzkgroup_linux_armv7_v0.8.8.so $GITHUB_WORKSPACE/lib/libzkgroup_linux_armv7.so

      - name: Build crayfish (armhf)
        uses: docker://clickable/ci-16.04-armhf:7.0.1
        with:
          args: clickable build -a armhf --verbose --libs crayfish

      - name: Build click (armhf)
        uses: docker://clickable/ci-16.04-armhf:7.0.1
        env:
          GOPATH: $GITHUB_WORKSPACE/go
        with:
          args: clickable build --verbose -a armhf --app

      - name: Upload the built click artifact (armhf)
        uses: actions/upload-artifact@v2
        with:
          name: Axolotl-Clickable
          path: build/arm-linux-gnueabihf/app/textsecure.nanuc_*.click
          retention-days: 1

  package-click-arm64:
    name: Package as click arm64
    runs-on: ubuntu-latest
    needs: [build-axolotl-web]

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Download axolotl and axolotl-web build artifacts
        uses: actions/download-artifact@v2
        with:
          path: build-artifacts

      - name: Put axolotl web in place
        run: |
          mkdir $GITHUB_WORKSPACE/axolotl-web/dist
          cp -rf build-artifacts/axolotl-web/* $GITHUB_WORKSPACE/axolotl-web/dist

      - name: Download built zkgroup library (amd64)
        run: |
            wget --quiet https://github.com/nanu-c/zkgroup/releases/download/v0.8.8/libzkgroup_linux_aarch64_v0.8.8.so
            mkdir $GITHUB_WORKSPACE/lib/
            mv libzkgroup_linux_aarch64_v0.8.8.so $GITHUB_WORKSPACE/lib/libzkgroup_linux_aarch64.so

      - name: Build crayfish (arm64)
        uses: docker://clickable/ci-16.04-arm64:7.0.1
        with:
          args: clickable build -a arm64 --verbose --libs crayfish

      - name: Build click (arm64)
        uses: docker://clickable/ci-16.04-arm64:7.0.1
        env:
          GOPATH: $GITHUB_WORKSPACE/go
        with:
          args: clickable build --verbose -a arm64 --app

      - name: Upload the built click artifact (amd64)
        uses: actions/upload-artifact@v2
        with:
          name: Axolotl-Clickable
          path: build/aarch64-linux-gnu/app/textsecure.nanuc_*.click
          retention-days: 1

  package-click-amd64:
    name: Package as click amd64
    runs-on: ubuntu-latest
    needs: [build-axolotl-web]

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Download axolotl and axolotl-web build artifacts
        uses: actions/download-artifact@v2
        with:
          path: build-artifacts

      - name: Put axolotl web in place
        run: |
          mkdir $GITHUB_WORKSPACE/axolotl-web/dist
          cp -rf build-artifacts/axolotl-web/* $GITHUB_WORKSPACE/axolotl-web/dist

      - name: Download built zkgroup library (amd64)
        run: |
            wget --quiet https://github.com/nanu-c/zkgroup/releases/download/v0.8.8/libzkgroup_linux_x86_64-v0.8.8.so
            mkdir $GITHUB_WORKSPACE/lib/
            mv libzkgroup_linux_x86_64-v0.8.8.so $GITHUB_WORKSPACE/lib/libzkgroup_linux_x86_64.so

      - name: Build crayfish (amd64)
        uses: docker://clickable/ci-16.04-amd64:7.0.1
        with:
          args: clickable build -a amd64 --verbose --libs crayfish

      - name: Build click (amd64)
        uses: docker://clickable/ci-16.04-amd64:7.0.1
        env:
          GOPATH: $GITHUB_WORKSPACE/go
        with:
          args: clickable build --verbose -a amd64 --app

      - name: Upload the built click artifact (amd64)
        uses: actions/upload-artifact@v2
        with:
          name: Axolotl-Clickable
          path: build/x86_64-linux-gnu/app/textsecure.nanuc_*.click
          retention-days: 1

  package-flatpak:
    name: Package as Flatpak bundle
    runs-on: ubuntu-latest
    needs: [build-axolotl, build-axolotl-web, build-crayfish]
    container:
      image: bilelmoussaoui/flatpak-github-actions:freedesktop-21.08
      options: --privileged

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - uses: bilelmoussaoui/flatpak-github-actions@v4
        with:
          bundle: "axolotl.flatpak"
          manifest-path: "flatpak/web/org.nanuc.Axolotl.yml"
          branch: "main"

  build-axolotl-deb-arm64:
    name: Build axolotl Debian arm64
    runs-on: ubuntu-latest

    steps:
      - name: Set up Go 1.16
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up cross-compiling environment
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu

      - name: Check out code
        uses: actions/checkout@v2

      - name: Download dependencies
        run: go mod download

      - name: Build
        run: env GOOS=linux GOARCH=arm64 CGO_ENABLED=1 CC=aarch64-linux-gnu-gcc PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig go build -o build/linux-arm64/axolotl .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: linux-arm64
          path: build/linux-arm64/axolotl
          retention-days: 1

  build-axolotl-web-deb-arm64:
    name: Build axolotl-web Debian arm64
    runs-on: ubuntu-latest

    steps:
      - name: Set up Node 16
        uses: actions/setup-node@v2.5.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check out code
        uses: actions/checkout@v2

      - name: Create folder
        run: mkdir --parents $GITHUB_WORKSPACE/build/linux-arm64/axolotl-web

      - name: Download dependencies
        run: npm --prefix ./axolotl-web --target_arch=arm64 ci --loglevel verbose

      - name: Build
        run: npm --prefix ./axolotl-web --target_arch=arm64 run build

      - name: Copy build files
        run: |
          cp --recursive $GITHUB_WORKSPACE/axolotl-web/dist $GITHUB_WORKSPACE/build/linux-arm64/axolotl-web/
          cp --recursive $GITHUB_WORKSPACE/guis $GITHUB_WORKSPACE/build/linux-arm64/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: linux-arm64
          path: build/linux-arm64/
          retention-days: 1

  build-crayfish-deb-arm64:
    name: Build crayfish Debian arm64
    runs-on: ubuntu-latest

    steps:
      - name: Install linker
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu

      - name: Configure Rust & Cross
        run: |
          rustup update
          rustup target add aarch64-unknown-linux-gnu
          cargo install cross

      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Build
        run: cd crayfish && cross build --release --target aarch64-unknown-linux-gnu

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: crayfish-arm64
          path: crayfish/target/aarch64-unknown-linux-gnu/release/crayfish
          retention-days: 1

  package-deb-arm64:
    name: Package as Debian arm64
    needs: [build-axolotl-deb-arm64, build-axolotl-web-deb-arm64, build-crayfish-deb-arm64]
    runs-on: ubuntu-latest

    steps:
      - name: Set up arm64 packaging environment
        run: |
          sudo apt update
          sudo dpkg --add-architecture arm64
          sudo apt install -y debmake debhelper gcc-aarch64-linux-gnu

      - name: Check out code
        uses: actions/checkout@v2

      - name: Download axolotl, axolotl-web and crayfish build artifacts
        uses: actions/download-artifact@v2
        with:
          path: build-artifacts

      - name: Get git tag version
        run: |
          git fetch --all --tags
          echo "TAG=$(git tag | tail --lines=1)" >> $GITHUB_ENV

      - name: Set package version
        run: |
          echo "RELEASE_VERSION=$(echo ${{ env.TAG }} | sed 's/v//')" >> $GITHUB_ENV

      - name: Prebuild package Debian arm64
        run: |
          wget https://github.com/nanu-c/axolotl/archive/v${{ env.RELEASE_VERSION }}.tar.gz --output-document=$GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}.tar.gz
          mkdir --parents $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/axolotl
          cp --recursive $GITHUB_WORKSPACE/build-artifacts/linux-arm64/* $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/axolotl/
          cp $GITHUB_WORKSPACE/deb/LICENSE $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/LICENSE
          cd $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }} && debmake --yes --email arno_nuehm@riseup.net --fullname "Arno Nuehm" --monoarch
          mkdir --parents $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/usr/share/icons/hicolor/128x128/apps
          mkdir --parents $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/usr/share/applications
          mkdir --parents $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/usr/bin
          mkdir --parents $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/etc/profile.d
          cp $GITHUB_WORKSPACE/README.md $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/README.Debian
          cp $GITHUB_WORKSPACE/deb/axolotl.png $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/usr/share/icons/hicolor/128x128/apps/axolotl.png
          cp $GITHUB_WORKSPACE/deb/axolotl.desktop $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/usr/share/applications/
          cp $GITHUB_WORKSPACE/deb/axolotl.sh $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/etc/profile.d/
          cp $GITHUB_WORKSPACE/deb/axolotl.install $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/
          cp $GITHUB_WORKSPACE/deb/postinst $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/
          cp $GITHUB_WORKSPACE/deb/control $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/control
          cp $GITHUB_WORKSPACE/deb/rules $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/rules
          wget https://github.com/nanu-c/zkgroup/raw/main/lib/libzkgroup_linux_aarch64.so --directory-prefix=$GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/usr/lib/
          mv $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/axolotl/axolotl $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/usr/bin/
          cp $GITHUB_WORKSPACE/build-artifacts/crayfish-arm64/crayfish $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/usr/bin/

      - name: Build package Debian arm64
        run: |
          rm $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/compat
          sudo ln -s /usr/lib/x86_64-linux-gnu/libfakeroot/libfakeroot-sysv.so /usr/aarch64-linux-gnu/lib/
          sed -i '4d' $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/changelog
          sed -e '/Initial/ {' -e 'r $GITHUB_WORKSPACE/docs/CHANGELOG.md' -e 'd' -e '}' -i $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/changelog
          sed -i '3,4d' $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/changelog
          sed -i 's/*/  */g' $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/changelog
          sed -i 's/<preferred name and address to reach the upstream project>/aaron@nanu-c.org/' $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/copyright
          sed -i 's/<url:\/\/example.com>/https:\/\/github.com\/nanu-c\/axolotl/' $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }}/debian/copyright
          cd $GITHUB_WORKSPACE/axolotl-${{ env.RELEASE_VERSION }} && debuild -i -us -uc -b -aarm64

      - name: Upload the built Debian package artifact (arm64)
        uses: actions/upload-artifact@v2
        with:
          name: Axolotl-Debian-arm64
          path: axolotl_*_arm64.deb
          retention-days: 1


  release:
    name: Create release
    # This ensures that this job only runs on git tags
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - package-appimage
      - package-click-armhf
      - package-click-arm64
      - package-click-amd64
      - package-deb-arm64
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Get git tag version
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Set git tag version
        run: |
          echo "VERSION=${{ steps.get_version.outputs.version }}" >> $GITHUB_ENV

      - name: Set package version Debian arm64
        run: |
          echo "RELEASE_VERSION=$(echo ${{ env.VERSION }} | sed 's/v//')" >> $GITHUB_ENV

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          path: build-artifacts

      - name: Get click version
        id: get_click_version
        run: |
          echo "::set-output name=version::$(ls ./build-artifacts/Axolotl-Clickable/*amd64.click | cut --delimiter="_" --fields=2)"

      - name: Set click version
        run: |
          echo "CLICKABLE_VERSION=${{ steps.get_click_version.outputs.version }}" >> $GITHUB_ENV

      - name: Create draft GitHub release page
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          body: |
            -
            -
          draft: true
          prerelease: false

      - name: Add AppImage to release (x86_64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build-artifacts/Axolotl-AppImage/Axolotl-x86_64.AppImage
          asset_name: Axolotl-${{ env.VERSION }}-x86_64.AppImage
          asset_content_type: application/vnd.appimage

      - name: Add click to release (amd64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build-artifacts/Axolotl-Clickable/textsecure.nanuc_${{ env.CLICKABLE_VERSION }}_amd64.click
          asset_name: textsecure.nanuc_${{ env.VERSION }}_amd64.click
          asset_content_type: application/vnd.debian.binary-package

      - name: Add click to release (arm64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build-artifacts/Axolotl-Clickable/textsecure.nanuc_${{ env.CLICKABLE_VERSION }}_arm64.click
          asset_name: textsecure.nanuc_${{ env.VERSION }}_arm64.click
          asset_content_type: application/vnd.debian.binary-package

      - name: Add click to release (armhf)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build-artifacts/Axolotl-Clickable/textsecure.nanuc_${{ env.CLICKABLE_VERSION }}_armhf.click
          asset_name: textsecure.nanuc_${{ env.VERSION }}_armhf.click
          asset_content_type: application/vnd.debian.binary-package

      - name: Add Debian package to release (arm64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build-artifacts/Axolotl-Debian-arm64
          asset_name: axolotl_${{ env.RELEASE_VERSION }}-1_arm64.deb
          asset_content_type: application/deb
